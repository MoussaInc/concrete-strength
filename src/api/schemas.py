from pydantic import BaseModel, Field, conlist
from typing import List, Optional

# --- Constantes pour la validation ---
MIN_AGE = 1.0 # √Çge minimal typique pour la mesure
MIN_POSITIVE = 0.0 # Composants doivent √™tre positifs (ou z√©ro)

# ========================
# üîπ FEATURES DE BASE
# ========================

class ConcreteFeatures(BaseModel):
    """
    Sch√©ma des 8 features de base du b√©ton. 
    Les noms sont en CamelCase pour la coh√©rence avec le mod√®le ML.
    """
    # Utilisation de Field pour ajouter des contraintes et des descriptions claires
    Cement: float = Field(..., gt=MIN_POSITIVE, description="Quantit√© de ciment (kg/m¬≥). Doit √™tre > 0 pour un b√©ton valide.")
    Slag: float = Field(MIN_POSITIVE, ge=MIN_POSITIVE, description="Quantit√© de laitier de haut-fourneau (Slag) (kg/m¬≥).")
    FlyAsh: float = Field(MIN_POSITIVE, ge=MIN_POSITIVE, description="Quantit√© de cendres volantes (Fly Ash) (kg/m¬≥).")
    Water: float = Field(..., gt=MIN_POSITIVE, description="Quantit√© d'eau (kg/m¬≥). Doit √™tre > 0.")
    Superplasticizer: float = Field(MIN_POSITIVE, ge=MIN_POSITIVE, description="Quantit√© de superplastifiant (kg/m¬≥).")
    CoarseAggregate: float = Field(MIN_POSITIVE, ge=MIN_POSITIVE, description="Quantit√© de gros agr√©gats (kg/m¬≥).")
    FineAggregate: float = Field(MIN_POSITIVE, ge=MIN_POSITIVE, description="Quantit√© de fines agr√©gats (kg/m¬≥).")
    Age: float = Field(..., ge=MIN_AGE, description=f"√Çge du b√©ton (jours), sup√©rieur ou √©gal a  {MIN_AGE} jour.")

# ========================
# üîπ PREDICTION
# ========================

class PredictionInput(BaseModel):
    """
    Sch√©ma d'entr√©e pour une pr√©diction. Accepte une liste d'√©chantillons ConcreteFeatures.
    """
    samples: List[ConcreteFeatures]
    
    # Configuration Pydantic pour l'exemple
    class Config:
        schema_extra = {
            "example": {
                "samples": [
                    {
                        "Cement": 540.0, "Slag": 0.0, "FlyAsh": 0.0, "Water": 162.0, 
                        "Superplasticizer": 2.5, "CoarseAggregate": 1040.0, 
                        "FineAggregate": 676.0, "Age": 28.0
                    }
                ]
            }
        }


class PredictionOutput(BaseModel):
    """
    Sch√©ma de sortie pour une pr√©diction batch.

    La structure est simplifi√©e pour retourner directement les r√©sultats pour chaque √©chantillon.
    """
    predicted_strengths_MPa: List[float] = Field(..., description="Liste des pr√©dictions de r√©sistance en MPa.")
    warnings: List[List[str]] = Field(..., description="Liste des avertissements (audit m√©tier) pour chaque √©chantillon.")


# ========================
# üîπ EVALUATION
# ========================

class EvaluationSample(ConcreteFeatures):
    """
    Sch√©ma d'entr√©e pour l'√©valuation, h√©rite des features et ajoute la valeur r√©elle.
    """
    true_strength: float = Field(..., gt=MIN_POSITIVE, description="R√©sistance r√©elle mesur√©e (MPa).")


class EvaluationInput(BaseModel):
    """
    Sch√©ma d'entr√©e pour l'√©valuation du mod√®le (accepte un batch).
    """
    samples: List[EvaluationSample]

    class Config:
        schema_extra = {
            "example": {
                "samples": [
                    {
                        "Cement": 540.0, "Slag": 0.0, "FlyAsh": 0.0, "Water": 162.0, 
                        "Superplasticizer": 2.5, "CoarseAggregate": 1040.0, 
                        "FineAggregate": 676.0, "Age": 28.0, 
                        "true_strength": 79.99 
                    }
                ]
            }
        }


class EvaluationOutput(BaseModel):
    """
    Sch√©ma de sortie pour l'√©valuation globale du mod√®le.
    """
    rmse: float = Field(..., description="Root Mean Squared Error (RMSE) global.")
    mae: float = Field(..., description="Mean Absolute Error (MAE) global.")
    r2: float = Field(..., description="Coefficient de d√©termination R¬≤ global.")
    n_samples: int = Field(..., ge=1, description="Nombre d'√©chantillons √©valu√©s.")
    
    # Optionnel: Ajouter l'audit des donn√©es d'entr√©e √† la sortie pour l'utilisateur
    warnings: Optional[List[List[str]]] = Field(None, description="Liste des avertissements pour chaque √©chantillon d'entr√©e.")